---
layout: post
title: "A New Era at the Hardening Framework Project"
date:   2015-04-15 21:00:00
image:
      url: /assets/article_images/2015-04-14-new-era/ShldsUpNewLit.jpg
video: false
comments: true
theme_color: 302F2D

author: 'Christoph Hartmann'
author_image: "/assets/images/b21946d0.chris.jpeg"
author_link: "https://twitter.com/chri_hartmann"
---

# Next

We are happy to announce, that the Hardening Framework moved to its [new home](https://github.com/hardening-io). As a vendor neutral project we aim to provide best-practice system hardening for various industries. We are now actively searching for supporters to build up the next level of this project. [Get in touch with us.](mailto:chris@lollyrock.com)

# Retrospection

About a year ago the Hardening Framework has started as a small challenge to proof if server hardening can be done with configuration management tools like Puppet, Chef, SaltStack or Ansible. As a small team started to find the answer.

Since [Deutsche Telekom](http://www.telekom.com/) was the first sponsor of this open source project, it was natural to use their [internal security guidelines](http://www.telekom.com/static/-/155996/18/technische-sicherheitsanforderungen-si) as a starting point for our security rules. Besides their interest in security, Deutsche Telekom faced the challenge that the manual harding processes just doesn't scale in the cloud. Especially [T-Labs](http://www.laboratories.telekom.com/), [Telekom Business Marketplace](https://portal.telekomcloud.com/) and the [Telekom Security](https://www.telekom.com/security) as well as [T-Systems](http://www.t-systems.com/) had great interests to find an industry-wide open source solution.

From the very beginning, the project had a few goals:

- support for multiple configuration management tools
- should work with existing open source modules / cookbooks
- reuse the same test scripts
- tests are developed first and are our baseline for the hardening implementation
- Puppet and Chef implementations have to adapt to the common tests

Quickly, we decided for [Serverspec](http://serverspec.org/) as the best tool for our tests, because it fulfilled all our needs, had a grown community and worked very well with existing configuration management tools.

Once we decided for Serverspec tests, we focused on the actual hardening implementation. This was a difficult task, because we wanted to reuse official deployment mechanisms for e.g. PostgreSQL but still add our hardening. After some prototypes we decided for an `overlay module` which acts as a companion to the original modules. It ensures that everything is properly configured and specific hardening options are added.

We identified some of the widely used open source modules that require hardening for live deployment:

- Linux OS
- SSH
- Apache Webserver
- Nginx
- PostgreSQL
- MySQL

For every project we started an implementation for Puppet and Chef like e.g. `os-hardening`:

 * [https://github.com/hardening-io/chef-os-hardening](https://github.com/hardening-io/chef-os-hardening)
 * [https://github.com/hardening-io/puppet-os-hardening](https://github.com/hardening-io/puppet-os-hardening)

For both implementations of the `os-hardening` module, we use a common test environment. [It combines all tests under one framework](http://ehaselwanter.com/en/blog/2014/05/08/using-test-kitchen-with-puppet/). We used [test-kitchen](http://kitchen.ci/) for Puppet and Chef tests:

 * [https://github.com/hardening-io/tests-os-hardening](https://github.com/hardening-io/tests-os-hardening)

Next, we selected the supported Linux distributions for our first release:

- RedHat 6.4, 6.5
- Ubuntu 12.04, 14.04
- CentOS 6.4, 6.5
- Oracle Linux 6.4, 6.5
- Debian 7

As a small team, we were required to automated the tests, otherwise this would not be manageable. We used Travis for code linting and style checks and complement it with a Jenkins environment, that spins up all supported Linux Vms in OpenStack, deploys the hardening, and runs the Serverspec tests and finally sends a report back. Those test are triggered with every Github Commit.

To get the Hardening Framework up and running easily, we have documented an examples for Puppet and Chef:

 * [https://github.com/hardening-io/example-puppet-hardening](https://github.com/hardening-io/example-puppet-hardening)
 * [https://github.com/hardening-io/example-chef-hardening](https://github.com/hardening-io/example-chef-hardening)

The project has evolved over the last year. It has become a mature tooling and is running on thousands of production systems. A special thanks to all contributors who helped to build this amazing project:

* [Andreas Schmidt](https://github.com/aschmidt75)
* [lollyrocker](https://github.com/lollyrocker)
* [Jan Klare](https://github.com/jklare)
* [Petri Sirkkala](https://github.com/sirkkalap)
* [Trent Petersen](https://github.com/Rockstar04)
* [Zac Hallett](https://github.com/zhallett)
* [Stephan Großberndt](https://github.com/sgrossberndt)
* [Reik Keutterling](https://github.com/spielkind)
* [Daniel Dreier](https://github.com/danieldreier)
* [Timo Goebel](https://github.com/timogoebel)
* [Tristan Helmich](https://github.com/fadenb)
* [Guillaume Destuynder](https://github.com/gdestuynder)
* [Alexander Dupuy](https://github.com/dupuy)
* [Dana Merrick](https://github.com/dmerrick)
* [Drew Rapenchuk](https://github.com/rapenchukd)
* [Kurt Huwig](https://github.com/kurthuwig)
* [Matthew Haughton](https://github.com/3flex)
* [Michael Krieg](https://github.com/michaelkrieg)
* [lighttower](https://github.com/lighttower)
* [Artem Sidorenko](https://github.com/artem-sidorenko)
* [Thomas Dütsch](https://github.com/a-tom)
* [Patrick Meier](https://github.com/atomic111)
* [Bernhard Weisshuhn (a.k.a. bernhorst)](https://github.com/bkw)
* [Christoph Hartmann](https://github.com/chris-rock)
* [Edmund Haselwanter](https://github.com/ehaselwanter)
* [Dominik Richter](https://github.com/arlimus)

Thank you very much!

